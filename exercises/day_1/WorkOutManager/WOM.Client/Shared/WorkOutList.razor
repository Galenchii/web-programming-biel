@using WOM.Models;
@using WOM.Client.ViewModels;

@inject WorkOutViewModel ViewModel

<h2>WorkOut List</h2>

<p>Enter new item:</p>
@if (ViewModel.ValidationHasErrors)
{
    <WorkOutErrors Errors="@ViewModel.Errors" />
}
<p>
    <input name="newItem" type="text"
           @ref="InputBox"
           @attributes="inputattributes"
           @bind-value="ViewModel.NewDescription"
           @bind-value:event="oninput" />
    <button @attributes="btnattributes"
            @onclick="@(async () => await ViewModel.AddNewAsync())">
        Save
    </button>
</p>

@if (workOuts == null)
{
    <p><strong>Loading...</strong></p>
}
else
{
    @foreach (var workOut in workOuts)
    {
        <hr />
        <WorkOutShow CurrentItem="@workOut"
                     Markcomplete="@(async () => await ViewModel.MarkdoneAsync(workOut))"
                     Delete="@(async () => await ViewModel.DeleteAsync(workOut))" />
    }
}

@code {
    public ElementReference InputBox;
    public List<WorkOut> workOuts;
    public Dictionary<string, object> btnattributes = new Dictionary<string, object>()
{
        {"disable", ""}
    };
    public Dictionary<string, object> inputattributes = new Dictionary<string, object>()
{
        { "class", "alert-danger" }
    };

    protected override async Task OnInitializedAsync()
    {
        workOuts = (await ViewModel.WorkOutAsync()).ToList();
        ViewModel.NewDescription = string.Empty;
        ViewModel.PropertyChanged += async (o, e) =>
        {
            CheckButton();
            if (e.PropertyName.Equals(nameof(ViewModel.WorkOutAsync)))
            {
                workOuts = (await ViewModel.WorkOutAsync()).ToList();
            }
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };

        await base.OnInitializedAsync();
    }

    private void CheckButton()
    {
        btnattributes.Clear();
        inputattributes.Clear();
    }
}
